cmake_minimum_required(VERSION 3.8)
project(follow_with_head)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

find_package(ament_cmake REQUIRED)
find_package(geometry_msgs REQUIRED)
find_package(vision_msgs)
find_package(control_msgs REQUIRED)
find_package(image_transport REQUIRED)
find_package(cv_bridge REQUIRED)
find_package(OpenCV REQUIRED)
find_package(visualization_msgs REQUIRED)
find_package(message_filters REQUIRED)
find_package(image_geometry REQUIRED)
find_package(depth_image_proc REQUIRED)
find_package(sensor_msgs REQUIRED)
find_package(error_msgs REQUIRED)
find_package(tf2_geometry_msgs REQUIRED)
find_package(tf2 REQUIRED)
find_package(tf2_ros REQUIRED)

find_package(rclcpp_action REQUIRED)
find_package(rclcpp REQUIRED)


set(dependencies
  vision_msgs
  geometry_msgs
  control_msgs
  image_transport
  cv_bridge
  OpenCV
  message_filters
  image_geometry
  depth_image_proc
  sensor_msgs
  error_msgs
  tf2_geometry_msgs
  tf2
  tf2_ros
  rclcpp_action
  rclcpp
  )

include_directories(include)

add_library(${PROJECT_NAME} SHARED
  src/follow_with_head/HeadController.cpp
  src/follow_with_head/PID.cpp
  src/follow_with_head/HSVFilter.cpp
  src/follow_with_head/DepthEstimator.cpp
)
ament_target_dependencies(${PROJECT_NAME} ${dependencies})

add_executable(follow_controller src/head_controller_main.cpp)
ament_target_dependencies(follow_controller ${dependencies})
target_link_libraries(follow_controller ${PROJECT_NAME})

add_executable(hsv_filter src/hsv_filter_main.cpp)
ament_target_dependencies(hsv_filter ${dependencies})
target_link_libraries(hsv_filter ${PROJECT_NAME})

add_executable(depth_estimator src/depth_main.cpp)
ament_target_dependencies(depth_estimator ${dependencies})
target_link_libraries(depth_estimator ${PROJECT_NAME})

add_executable(whole src/whole.cpp)
ament_target_dependencies(whole ${dependencies})
target_link_libraries(whole ${PROJECT_NAME})

install(TARGETS
  ${PROJECT_NAME}
  follow_controller
  hsv_filter
  depth_estimator
  whole
  ARCHIVE DESTINATION lib
  LIBRARY DESTINATION lib
  RUNTIME DESTINATION lib/${PROJECT_NAME}
)

install(DIRECTORY launch config DESTINATION share/${PROJECT_NAME})

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  set(ament_cmake_copyright_FOUND TRUE)
  set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

ament_export_include_directories(include)
ament_export_libraries(${PROJECT_NAME})
ament_export_dependencies(${dependencies})
ament_package()
